#include <modbus/modbus.h>
#include <iostream>
#include <cstring>
#include <csignal>
#include <unistd.h>
#include <cstdlib>
#include <cerrno>
#include <thread>
#include <chrono>

modbus_t *ctx;
modbus_mapping_t *mb_mapping;
int server_socket = -1;
int previous_coil_value = -1;
int previous_input_value = -1;

// 🚿 Oprydning ved Ctrl+C
void cleanup(int signum) {
    std::cout << "\nCleaning up and exiting...\n";
    if (server_socket != -1) close(server_socket);
    if (ctx) modbus_free(ctx);
    if (mb_mapping) modbus_mapping_free(mb_mapping);
    exit(0);
}

// 🧑 Terminal-kommandotråd
void terminal_input_thread() {
    std::string input;
    while (true) {
        std::getline(std::cin, input);
        if (!input.empty()) {
            if (input == "start") { 			//sætter Coil[0] til 1 (Digital Output aktiv)
                mb_mapping->tab_bits[0] = 1;
                std::cout << "✅ Coil[0] sat til 1\n";
            } else if (input == "stop") {		//sætter Coil[0] til 0
                mb_mapping->tab_bits[0] = 0;
                std::cout << "🛑 Coil[0] sat til 0\n";
            } else if (input == "in1") {		//sætter Input[0] til 1 (Digital Input aktiv)
                mb_mapping->tab_input_bits[0] = 1;
                std::cout << "📥 Input[0] sat til 1\n";
            } else if (input == "in0") {		//sætter Input[0] til 0
                mb_mapping->tab_input_bits[0] = 0;
                std::cout << "📥 Input[0] sat til 0\n";
            } else if (input == "exit") {		//afslutter programmet
                cleanup(0);
            } else {
                std::cout << "ℹ️ Ukendt kommando. Brug: start, stop, in1, in0, exit\n";
            }
        }
    }
}

int main() {
    signal(SIGINT, cleanup);

    // 🔌 Start Modbus TCP server på port 502
    ctx = modbus_new_tcp("0.0.0.0", 502);
    if (!ctx) {
        std::cerr << "❌ Kunne ikke oprette Modbus context\n";
        return -1;
    }

    // 🧠 Alloker både coils og discrete inputs
    mb_mapping = modbus_mapping_new(
        1,  // 1 coil (Digital Output)
        1,  // 1 discrete input (Digital Input)
        0, 0  // Ingen holding/input registers
    );
    if (!mb_mapping) {
        std::cerr << "❌ Mapping fejl: " << modbus_strerror(errno) << std::endl;
        modbus_free(ctx);
        return -1;
    }

    // 🛠️ Start lytning
    server_socket = modbus_tcp_listen(ctx, 1);
    if (server_socket == -1) {
        std::cerr << "❌ Lytte-fejl: " << modbus_strerror(errno) << std::endl;
        modbus_free(ctx);
        modbus_mapping_free(mb_mapping);
        return -1;
    }

    std::cout << "✅ Modbus TCP Server kører på port 502...\n";

    // 📡 Accepter forbindelse fra UR-robotten
    modbus_tcp_accept(ctx, &server_socket);

    // 🧵 Start terminaltråd
    std::thread t_input(terminal_input_thread);
    t_input.detach();

    // 🔁 Modtag og håndtér forespørgsler
    while (true) {
        uint8_t query[MODBUS_TCP_MAX_ADU_LENGTH];
        int rc = modbus_receive(ctx, query);

        if (rc > 0) {
            modbus_reply(ctx, query, rc, mb_mapping);

            if (mb_mapping->tab_bits[0] != previous_coil_value) {
                std::cout << "📤 Coil[0] ændret til: " << (int)mb_mapping->tab_bits[0] << std::endl;
                previous_coil_value = mb_mapping->tab_bits[0];
            }

            if (mb_mapping->tab_input_bits[0] != previous_input_value) {
                std::cout << "📥 Input[0] er nu: " << (int)mb_mapping->tab_input_bits[0] << std::endl;
                previous_input_value = mb_mapping->tab_input_bits[0];
            }
        } else if (rc == -1) {
            std::this_thread::sleep_for(std::chrono::milliseconds(100));
        }
    }

    cleanup(0);
    return 0;
}
